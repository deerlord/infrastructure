#!/bin/bash

source ./config

export VOLUMES=/var/lib/docker/volumes

setup_prep() {
  /usr/sbin/useradd -r -s /sbin/nologin $1
}

container_prep() {
  container="$1"
  mkdir -p ./.build/$container
  cd ./.build/$container
}

container_build() {
  container="$1"
  if [[ -e Dockerfile ]]
  then
    docker build --pull --no-cache -t $container .
  fi
  cd ../../
  rm -rf ./.build/$container
}

basic_container() {
  container=$1
  echo docker create \
    $(run_as $container) \
    --restart=unless-stopped \
    --name=$container
}

container_use_system_time() {
  echo \
    -v '/etc/localtime:/etc/localtime:ro' \
    -v '/etc/timezone:/etc/timezone:ro' 
}

container_exists() {
  if [[ $(docker ps -a | grep -c $1) -eq 1 ]]
  then
    echo 1
  else
    echo 0
  fi
}

container_running() {
  if [[ $(docker ps | grep -c $1) -eq 1 ]]
  then
    echo 1
  else
    echo 0
  fi
}

public_service() {
  NAME=$1
  echo "${HOST_IP} ${NAME}.${HOST_DOMAIN}" >> ${VOLUMES}/dnsmasq/_data/local_hosts
  docker restart nameresolution
}

http_egress() {
  container=$1
  network="${container}_http_egress"
  if [[ $(docker network ls | awk '{print $2}' | grep -c $network) -eq 0 ]]
  then
    docker network create $network --internal
  fi
  if [[ $(container_exists squid) -eq 1 && $(container_exists $container) -eq 1 ]]
  then
    docker network connect $network $container
    docker network connect $network squid
  fi
  docker restart squid
}

http_ingress() {
  container=$1
  if [[ -z $2 ]]
  then
    port='8080'
  else
    port="$2"
  fi
  network="${container}_http_ingress"
  if [[ $(docker network ls | awk '{print $2}' | grep -c $network) -eq 0 ]]
  then
    docker network create $network --internal
  fi
  if [[ $(container_exists nginx) -eq 1 && $(container_exists $container) -eq 1 ]]
  then
    conf="${VOLUMES}/nginx/_data/conf.d/${container}.conf"
cat > $conf <<'EOF'
server {
  listen 443 ssl;
  server_name container.HOST_DOMAIN;
  location / {
    proxy_pass http://container:PORT/;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Request-URI $request_uri;
  }
}
EOF
    sed -i \
      -e "s container ${container} g" \
      -e "s HOST_DOMAIN ${HOST_DOMAIN} g" \
      -e "s PORT ${port} g" \
      $conf
    chown nginx $conf
    docker network connect $network $container
    docker network connect $network nginx
    public_service $container
    docker restart nginx
  fi
}

http_ingress_client_cert() {
  if [[ -z $1 || -z $2  ]]
  then
    return 1
  fi
  service="$1"
  client_cert_path="$2"
  mkdir -p ${VOLUMES}/nginx/_data/ssl/clients/${service}
  cp ${client_cert_path} ${VOLUMES}/nginx/_data/ssl/clients/${service}/
}

remove_http_ingress() {
  container=$1
  network="${container}_http_ingress"
  mv -v ${VOLUMES}/nginx/_data/conf.d/${container}.conf{,-disabled}
  docker network disconnect $network $container > /dev/null 2>&1
  docker network disconnect $network nginx > /dev/null 2>&1
  docker network remove $network > /dev/null 2>&1
  mv -v ${VOLUMES}/nginx/_data/conf.d/${container}.conf{,-disabled}
}

remove_http_egress() {
  container=$1
  network="${container}_http_egress"
  docker network disconnect $network $container > /dev/null 2>&1
  docker network disconnect $network squid > /dev/null 2>&1
  docker network remove $network > /dev/null 2>&1
}

run_as() {
  echo "--env USER_ID=$(id -u $1) --env GROUP_ID=$(id -g $1)"
}

update_ad_domains() {
  list='https://raw.githubusercontent.com/hectorm/hmirror/master/data/adaway.org/list.txt'
  echo "0.0.0.0 $(curl ${list} 2>/dev/null | tr '\n' ' ')" \
    > ${VOLUMES}/dnsmasq/_data/ad_domains
}

add_static_lease() {
  mac_address="$1"
  ip="$2"
  has_lease=$(grep -c ${ip} ${VOLUMES}/dnsmasq/_data/static)
  if [[ $has_lease -eq 0 ]]
  then
    echo "dhcp-host=${mac_address},${ip}" >> ${VOLUMES}/dnsmasq/_data/static
    if [[ $(container_running dnsmasq) -eq 1 ]]
    then
      docker restart dnsmasq
    fi
  fi
}

set_volume_ownership() {
  user="$1"
  if [[ -z $2 ]]
  then
    vol=$user
  else
    vol=$2
  fi
  if [[ -z $3 ]]
  then
    group=$user
  else
    group=$3
  fi
  chown -R ${user}:${group} ${VOLUMES}/${vol}/_data/
  chmod -R o-rwx ${VOLUMES}/${vol}/_data/
}

export -f container_prep
export -f container_build
export -f basic_container
export -f container_use_system_time
export -f container_exists
export -f container_running
export -f public_service
export -f run_as
export -f update_ad_domains
export -f add_static_lease
export -f set_volume_ownership
export -f setup_prep
