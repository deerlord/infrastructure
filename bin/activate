#!/bin/bash

source ./conf.d/CONFIG

dev_remove_containers() {
  docker ps -a | awk '{print $1}' | while read id
  do
    docker stop $id
    docker rm $id
  done
}

dev_remove_images() {
  docker images -a | awk '{print $3}' | while read id
  do
    docker rmi -f $id
  done
}

basic_container() {
  container=$1
  echo docker create \
    $(run_as $container) \
    --restart=unless-stopped \
    --name=$container
}

container_exists() {
  if [[ $(docker ps -a | grep -c $1) -eq 1 ]]
  then
    echo 1
  else
    echo 0
  fi
}

container_running() {
  if [[ $(docker ps | grep -c $1) -eq 1 ]]
  then
    echo 1
  else
    echo 0
  fi
}

public_service() {
  NAME=$1
  cat >> /var/lib/docker/volumes/dnsmasq/_data/hosts <<EOF
${HOST_IP} ${NAME} ${NAME}.${HOST_NAME}
EOF
}

http_egress() {
  container=$1
  network="${container}_http_egress"
  if [[ $(docker network ls | awk '{print $2}' | grep -c $network) -eq 0 ]]
  then
    docker network create $network --internal
  fi
  if [[ $(container_exists squid) -eq 1 && $(container_exists $container) -eq 1 ]]
  then
    docker network connect $network $container
    docker network connect $network squid
  fi
}

http_ingress() {
  container=$1
  network="${container}_http_ingress"
  if [[ $(docker network ls | awk '{print $2}' | grep -c $network) -eq 0 ]]
  then
    docker network create $network --internal
  fi
  if [[ $(container_exists nginx) -eq 1 && $(container_exists $container) -eq 1 ]]
  then
    conf="/var/lib/docker/volumes/nginx/_data/conf.d/${container}.conf"
cat > $conf <<'EOF'
server {
  listen 443 ssl;
  server_name container.HOST_DOMAIN;
  location / {
    proxy_pass http://container:8080/;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Request-URI $request_uri;
  }
}
EOF
    sed -i \
      -e "s container ${container} g" \
      -e "s HOST_DOMAIN ${HOST_DOMAIN} g" \
      $conf
    chown nginx $conf
    docker network connect $network $container
    docker network connect $network nginx
    public_service $container
  fi
}

remove_http_ingress() {
  container=$1
  network="${container}_http_ingress"
  docker network disconnect $network $container > /dev/null 2>&1
  docker network disconnect $network nginx > /dev/null 2>&1
  docker network remove $network > /dev/null 2>&1
}

remove_http_egress() {
  container=$1
  network="${container}_http_egress"
  docker network disconnect $network $container > /dev/null 2>&1
  docker network disconnect $network squid > /dev/null 2>&1
  docker network remove $network > /dev/null 2>&1
}

run_as() {
  echo "--env USER_ID=$(id -u $1) --env GROUP_ID=$(id -g $1)"
}

export -f basic_container
export -f container_exists
export -f container_running
export -f public_service
export -f http_egress
export -f http_ingress
export -f remove_http_ingress
export -f remove_http_egress
export -f run_as
