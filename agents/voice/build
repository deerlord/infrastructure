#!/bin/bash

docker pull debian
/usr/sbin/useradd -r -s /sbin/nologin voice
mkdir -p ./.build/voice/
cd ./.build/voice/
cat > Dockerfile <<'EOF'
FROM debian
RUN apt update -y
RUN apt install -y python3.7
RUN apt install -y python3-pip
RUN apt install -y python3-pyaudio
RUN pip3 install requests
RUN mkdir -p /opt/voice/
COPY ./voice.py /opt/voice/
CMD ["python3", "/opt/voice/voice.py"
EOF
cat > ./voice.py <<'EOF'
from http.server import BaseHTTPRequestHandler, HTTPServer
from io import BytesIO
import pyaudio
import requests
CHUNK = 1024
class AudioListener():
    def __init__(self):
        self.__audio = pyaudio.PyAudio()
        self.__stream = self.__audio.open(
            format=pyaudio.paInt16,
            channels=2,
            rate=44100,
            input=True,
            frames_per_buffer=CHUNK,
        )
        self.__buffer = []
    def __trigger(self, chunk):
        retval = False
        # if chunk has "sound" return True, else False
        return retval
    def __listen(self):
        while self.__listen:
            data = self.__stream.read(CHUNK)
            if self.__trigger(data):
                self.__buffer.append(data)
            elif len(self.__buffer):
                pass  # send buffer
                # needs some kind of delay
                self.__buffer = []
listener = AudioListener()
class RequestHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        audio = self.rfile.read(content_length)
        self.send_response(200)
        self.end_headers()
        listener.listen = False
        # play audio
        listener.listen = True
httpd = HTTPServer(('', 8080), RequestHandler)
httpd.serve_forever()
EOF
cd ../../
rm -rf ./.build/voice/
